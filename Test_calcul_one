import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class CalculYes {
    private static final Map<Character, Integer> ROMAN_VALUES = new HashMap<>();

    static {
        ROMAN_VALUES.put('I', 1);
        ROMAN_VALUES.put('V', 5);
        ROMAN_VALUES.put('X', 10);
        ROMAN_VALUES.put('L', 50);
        ROMAN_VALUES.put('C', 100);
        ROMAN_VALUES.put('D', 500);
        ROMAN_VALUES.put('M', 1000);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите выражение (например, 'X + II' или '10 - 3'):");
        String[] inputs = scanner.nextLine().toUpperCase().split(" ");

        if (inputs.length != 3) {
            System.out.println("Некорректный ввод и точка");
            scanner.close();
            return;
        }

        String input1 = inputs[0];
        char operation = inputs[1].charAt(0);
        String input2 = inputs[2];

        boolean isRoman1 = isRoman(input1);
        boolean isRoman2 = isRoman(input2);
        // проверка: если одно число римское, а другое арабское, выводит ошибку
        if (isRoman1 != isRoman2) {
            System.out.println("Оба числа должны быть либо римскими, либо арабскими.");
            return;
        }

        int number1 = isRoman1 ? toDecimal(input1) : Integer.parseInt(input1);
        int number2 = isRoman2 ? toDecimal(input2) : Integer.parseInt(input2);

        int result = calculate(number1, number2, operation);

        // Если оба числа были римскими, конвертируем результат обратно в римское число.
        if (isRoman1) {
            System.out.println("Результат: " + toRoman(result));
        } else {
            System.out.println("Результат: " + result);
        }
    }

    public static String toRoman(int number) {
        if (number <= 0) {
            System.out.println("Ошибка: Римские числа не могут быть отрицательными или нулем.");
            return "Ошибка";
        }

        StringBuilder roman = new StringBuilder();
        int[] decimalValues = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] romanSymbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        int remainingValue = number;

        for (int i = 0; i < decimalValues.length; i++) {
            while (remainingValue >= decimalValues[i]) {
                roman.append(romanSymbols[i]);
                remainingValue -= decimalValues[i];
            }
        }

        return roman.toString();
    }

    public static int toDecimal(String roman) {
        int result = 0;
        int prevValue = 0;

        for (int i = roman.length() - 1; i >= 0; i--) {
            int currentValue = ROMAN_VALUES.get(roman.charAt(i));

            if (currentValue < prevValue)
                result -= currentValue;
            else
                result += currentValue;

            prevValue = currentValue;
        }

        return result;
    }

    public static int calculate(int number1, int number2, char operation) {
        switch (operation) {
            case '+':
                return number1 + number2;
            case '-':
                return number1 - number2;
            case '*':
                return number1 * number2;
            case '/':
                // Добавляем проверку на деление на ноль
                if (number2 == 0) {
                    System.out.println("Ошибка: Деление на ноль.");
                    return 0;
                }
                return number1 / number2;
            default:
                System.out.println("Неверная операция");
                return 0;
        }
    }

    // является ли строка валидным римским числом
    public static boolean isRoman(String input) {
        return input.matches("^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$");
    }
}
